// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package keycloak

import (
	"context"
	gocloak "github.com/Nerzal/gocloak/v13"
	jwt "github.com/golang-jwt/jwt/v4"
	"sync"
)

// Ensure, that GoCloaklikeMock does implement GoCloaklike.
// If this is not the case, regenerate this file with moq.
var _ GoCloaklike = &GoCloaklikeMock{}

// GoCloaklikeMock is a mock implementation of GoCloaklike.
//
//	func TestSomethingThatUsesGoCloaklike(t *testing.T) {
//
//		// make and configure a mocked GoCloaklike
//		mockedGoCloaklike := &GoCloaklikeMock{
//			DecodeAccessTokenFunc: func(ctx context.Context, accessToken string, realm string) (*jwt.Token, *jwt.MapClaims, error) {
//				panic("mock out the DecodeAccessToken method")
//			},
//			GetUserInfoFunc: func(ctx context.Context, accessToken string, realm string) (*gocloak.UserInfo, error) {
//				panic("mock out the GetUserInfo method")
//			},
//			LoginFunc: func(ctx context.Context, clientId string, clientSecret string, realm string, username string, password string) (*gocloak.JWT, error) {
//				panic("mock out the Login method")
//			},
//		}
//
//		// use mockedGoCloaklike in code that requires GoCloaklike
//		// and then make assertions.
//
//	}
type GoCloaklikeMock struct {
	// DecodeAccessTokenFunc mocks the DecodeAccessToken method.
	DecodeAccessTokenFunc func(ctx context.Context, accessToken string, realm string) (*jwt.Token, *jwt.MapClaims, error)

	// GetUserInfoFunc mocks the GetUserInfo method.
	GetUserInfoFunc func(ctx context.Context, accessToken string, realm string) (*gocloak.UserInfo, error)

	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, clientId string, clientSecret string, realm string, username string, password string) (*gocloak.JWT, error)

	// calls tracks calls to the methods.
	calls struct {
		// DecodeAccessToken holds details about calls to the DecodeAccessToken method.
		DecodeAccessToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
		}
		// GetUserInfo holds details about calls to the GetUserInfo method.
		GetUserInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
		}
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientId is the clientId argument value.
			ClientId string
			// ClientSecret is the clientSecret argument value.
			ClientSecret string
			// Realm is the realm argument value.
			Realm string
			// Username is the username argument value.
			Username string
			// Password is the password argument value.
			Password string
		}
	}
	lockDecodeAccessToken sync.RWMutex
	lockGetUserInfo       sync.RWMutex
	lockLogin             sync.RWMutex
}

// DecodeAccessToken calls DecodeAccessTokenFunc.
func (mock *GoCloaklikeMock) DecodeAccessToken(ctx context.Context, accessToken string, realm string) (*jwt.Token, *jwt.MapClaims, error) {
	if mock.DecodeAccessTokenFunc == nil {
		panic("GoCloaklikeMock.DecodeAccessTokenFunc: method is nil but GoCloaklike.DecodeAccessToken was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
	}
	mock.lockDecodeAccessToken.Lock()
	mock.calls.DecodeAccessToken = append(mock.calls.DecodeAccessToken, callInfo)
	mock.lockDecodeAccessToken.Unlock()
	return mock.DecodeAccessTokenFunc(ctx, accessToken, realm)
}

// DecodeAccessTokenCalls gets all the calls that were made to DecodeAccessToken.
// Check the length with:
//
//	len(mockedGoCloaklike.DecodeAccessTokenCalls())
func (mock *GoCloaklikeMock) DecodeAccessTokenCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}
	mock.lockDecodeAccessToken.RLock()
	calls = mock.calls.DecodeAccessToken
	mock.lockDecodeAccessToken.RUnlock()
	return calls
}

// GetUserInfo calls GetUserInfoFunc.
func (mock *GoCloaklikeMock) GetUserInfo(ctx context.Context, accessToken string, realm string) (*gocloak.UserInfo, error) {
	if mock.GetUserInfoFunc == nil {
		panic("GoCloaklikeMock.GetUserInfoFunc: method is nil but GoCloaklike.GetUserInfo was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
	}
	mock.lockGetUserInfo.Lock()
	mock.calls.GetUserInfo = append(mock.calls.GetUserInfo, callInfo)
	mock.lockGetUserInfo.Unlock()
	return mock.GetUserInfoFunc(ctx, accessToken, realm)
}

// GetUserInfoCalls gets all the calls that were made to GetUserInfo.
// Check the length with:
//
//	len(mockedGoCloaklike.GetUserInfoCalls())
func (mock *GoCloaklikeMock) GetUserInfoCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}
	mock.lockGetUserInfo.RLock()
	calls = mock.calls.GetUserInfo
	mock.lockGetUserInfo.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *GoCloaklikeMock) Login(ctx context.Context, clientId string, clientSecret string, realm string, username string, password string) (*gocloak.JWT, error) {
	if mock.LoginFunc == nil {
		panic("GoCloaklikeMock.LoginFunc: method is nil but GoCloaklike.Login was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ClientId     string
		ClientSecret string
		Realm        string
		Username     string
		Password     string
	}{
		Ctx:          ctx,
		ClientId:     clientId,
		ClientSecret: clientSecret,
		Realm:        realm,
		Username:     username,
		Password:     password,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, clientId, clientSecret, realm, username, password)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedGoCloaklike.LoginCalls())
func (mock *GoCloaklikeMock) LoginCalls() []struct {
	Ctx          context.Context
	ClientId     string
	ClientSecret string
	Realm        string
	Username     string
	Password     string
} {
	var calls []struct {
		Ctx          context.Context
		ClientId     string
		ClientSecret string
		Realm        string
		Username     string
		Password     string
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}
